ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
class_diag(prob, poke$Legendary)
table(predict=as.numeric(prob>.5),truth=poke$Legendary)%>%addmargins
### 1c
### CV of fit1b
set.seed(1234)
k=10 #choose number of folds
data1<-poke[sample(nrow(poke)),] #randomly order rows
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary ~ ., data=train, family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
apply(diags,2,mean) #average across all k results
set.seed(1234)
k=10
data2<-poke1[sample(nrow(poke1)),] #randomly order rows
### 1d
### Lasso on the full fit1b (all vars)
fit1b<-glm(Legendary~., data=poke, family="binomial")
y<-as.matrix(poke$Legendary)
x <- model.matrix(fit1b)
x <-x[,-1]
x <- scale(x)
cv<-cv.glmnet(x,y, family="binomial")
lasso1d <- glmnet(x,y,lambda = cv$lambda.1se, family="binomial")
coef(lasso1d)
# Create a new table for running only lasso-var glm
poke1 <- poke %>% mutate(Fly1 = Type.1, Psy1 = Type.1) %>% dplyr::select(-Type.1, -Type.2)
poke1$Fly1 <- ifelse(poke1$Fly1 == "Flying", 1,0)
poke1$Psy1 <- ifelse(poke1$Psy1 == "Psychic",1,0)
#View(poke1)
# Re-fit glm with only lasso-variables
fit1d <- glm(Legendary~., data=poke1, family = "binomial")
prob1d <- predict(fit1d, type = "response")
##
#Classification diagnostics
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
class_diag(prob1d, poke1$Legendary)
table(predict=as.numeric(prob1d>.5),truth=poke1$Legendary)%>%addmargins
##
View(poke1)
set.seed(1234)
k=10
View(poke1)
data2<-poke1[sample(nrow(poke1)),] #randomly order rows
folds<-cut(seq(1:nrow(poke1)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data2[folds!=i,]
test<-data2[folds==i,]
truth<-test$Legendary
## Train model on training set
fit1e<-glm(Legendary ~ ., data=train, family="binomial")
probs<-predict(fit1e,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
set.seed(1234)
k=10
#View(poke1)
data2<-poke1[sample(nrow(poke1)),] #randomly order rows
folds<-cut(seq(1:nrow(poke1)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data2[folds!=i,]
test<-data2[folds==i,]
truth<-test$Legendary
## Train model on training set
fit1e<-glm(Legendary ~ ., data=train, family="binomial")
probs<-predict(fit1e,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
install.packages("randomForest")
#install.packages("randomForest")
library(randomForest)
#install.packages("randomForest")
library(randomForest)
fit_rf=randomForest(Legendary~.,data=poke)
class_diag(fit_rf$votes[,2],poke$Legendary)
######### CV
set.seed(1234)
k=10
data1<-poke[sample(nrow(poke)),]
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
fit<-randomForest(Legendary~.,data=train)
probs<-predict(fit,newdata = test,type="prob")[,2]
diags<-rbind(diags,class_diag(probs,truth))
}
diags%>%summarize_all(mean)
malig<-c(.49, .36, .57, .53, .61, .66)
benign<-c(.41, .22, .26, .56, .31 ,.39)
#d <- malig-benign
#sum(d > 0)
df <- expand.grid(malig, benign, lets=c("malig", "benign"), nums=c(1,2)) %>% rename(malig = Var1, benign = Var2)
#View(df)
df %>% summarize(sum((malig-benign)>0), mean((malig-benign)>0))
d <- vector()
for(i in 1:nrow(df)){
for(k in 1:nrow(df)){
while k<i {
for(i in 1:nrow(df)){
for(k in 1:nrow(df)){
while k<i {
for(i in 1:nrow(df)){
for(k in 1:nrow(df)){
while (k<i) {
k = k+1
}
ifelse df$malig[i]> df$benign[k], d=1, d=0
for(i in 1:nrow(df)){
for(k in 1:nrow(df)){
while (k<i) {
k = k+1
}
ifelse (df$malig[i]> df$benign[k], d=1, d=0)
}
}
## Your code here
wilcox.test(malig, benign)
wilcox.test(benign, malig)
rbind(benign, malig) %>% View()
cbind(benign, malig) %>% View()
cbind(benign, malig) %>% pivot_longer(benign, malig) %>% View()
df1 <- cbind(benign, malig)
df1 %>% pivot_longer(benign, malig) %>% View()
df1 %>% tidyverse::pivot_longer(benign, malig) %>% View()
df1 %>% tidyr::pivot_longer(benign, malig) %>% View()
df1 %>% dplyr::pivot_longer(benign, malig) %>% View()
### 2c.
df1 <- data.frame(cbind(benign, malig))
df1 %>% dplyr::pivot_longer(benign, malig) %>% View()
df1 %>% pivot_longer(benign, malig) %>% View()
df1 %>% pivot_longer(benign, malig, names_to = "type") %>% View()
df1 %>% pivot_longer(c(benign, malig), names_to = "type") %>% View()
df1 %>% pivot_longer(c(benign, malig)) %>% View()
ata.frame(cbind(benign, malig)) %>% pivot_longer(c(benign, malig)) %>% View()
data.frame(cbind(benign, malig)) %>% pivot_longer(c(benign, malig)) %>% View()
df1 %>% ggplot()+geom_histogram(fill="name")
df1 %>% ggplot()+geom_histogram(aes(name),fill="name")
df1 %>% ggplot(aes(x=value),fill="name")+geom_histogram()
df1 %>% ggplot(aes(x=value),fill=name)+geom_histogram()
df1 %>% ggplot(aes(x=value, color=name))+geom_histogram()
df1 %>%
ggplot(df1, aes(x=value))+geom_histogram()
#df1 %>%
ggplot(df1, aes(x=value))+geom_histogram()
ggplot(df1, aes(x="value"))+geom_histogram()
#df1 %>%
ggplot(df1, aes(x="value"))+geom_histogram(stat="count")
#df1 %>%
ggplot(df1, aes(x="value"))+geom_histogram(aes(x="value"))
histogram(df1)
hist(df1)
hist(df1, x=value)
hist(df1, x=df1$value)
glimpse(df1)
df1 <- data.frame(cbind(benign, malig)) %>% pivot_longer(c(benign, malig))
glimpse(df1)
#df1 %>%
ggplot(df1, aes(x="value"))+geom_histogram()
#df1 %>%
ggplot(df1, aes(x=value))+geom_histogram()
#df1 %>%
ggplot(df1, aes(x=value))+geom_histogram(fill=name)
#df1 %>%
ggplot(df1, aes(x=value, fill=name))+geom_histogram()
#df1 %>%
ggplot(df1, aes(x=value, fill=name, color="black"))+geom_histogram()
#df1 %>%
ggplot(df1, aes(x=value, fill=name))+geom_histogram(color="black")
#View(df)
df %>% summarize(sum((malig-benign)>0), mean((malig-benign)>0))
View(df)
df <- expand.grid(malig, benign) %>% rename(malig = Var1, benign = Var2)
View(df)
#View(df)
df %>% summarize(sum((malig-benign)>0), mean((malig-benign)>0))
View(df1)
df1$y = ifelse(df1$name =="malig",1,0)
View(df1)
df1 %>% rename("prob" = "value")
sens<-function(cutoffs,data=df1, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=df1, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(seq(cutoffs),sens,data)
cutoffs<-c(.2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7)
sens<-function(cutoffs,data=df1, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=df1, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(seq(cutoffs),sens,data)
sensitivity<-sapply(seq(cutoffs),sens,df1)
specificity<-sapply(seq(cutoffs),spec,df1)
View(df1)
df1 %>% rename("prob" = "value")
df1 <- df1 %>% rename("prob" = "value")
View(df1)
sens<-function(cutoffs,data=df1, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=df1, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(seq(cutoffs),sens,df1)
specificity<-sapply(seq(cutoffs),spec,df1)
ROC1<-data.frame(sensitivity,specificity,cutoffs)
View(ROC1)
sens<-function(cutoffs,data=data, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=data, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(seq(cutoffs),sens,df1)
specificity<-sapply(seq(cutoffs),spec,df1)
ROC1<-data.frame(sensitivity,specificity,cutoffs)
View(ROC1)
sens<-function(cutoffs,data=data, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=data, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(cutoffs,sens,df1)
specificity<-sapply(cutoffs,spec,df1)
ROC1<-data.frame(sensitivity,specificity,cutoffs)
View(ROC1)
ROC1%>%gather(key,rate,-cutoff)%>%ggplot(aes(cutoff,rate,color=key))+geom_path()+
geom_vline(xintercept=c(.1,.5,.9),lty=2,color="gray50")
ROC1%>%gather(key,rate,-cutoffs)%>%ggplot(aes(cutoffs,rate,color=key))+geom_path()+
geom_vline(xintercept=c(.1,.5,.9),lty=2,color="gray50")
ROC1$TPR<-rev(sensitivity)
ROC1$FPR<-rev(1-specificity)
ROC1%>%ggplot(aes(FPR,TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
df2 <- expand.grid(malig, benign, cutoffs) %>% rename(malig = Var1, benign = Var2, cutoffs = Var3)
View(df2)
df2 <- expand.grid(df1, cutoffs) %>% rename(malig = Var1, benign = Var2, cutoffs = Var3)
df2 <- expand.grid(df1, cutoffs) %>% View()
expand.grid(df1, cutoffs) %>% View()
df2 <- expand.grid(df1, cutoffs)
#######
df2 <- cbind(benign, malig)
View(df2)
View(df1)
expand.grid(benign, cutoffs) %>% View()
df_b <- expand.grid(benign, cutoffs) %>% rename(benign = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
View(df_b)
df_b <- expand.grid(benign, cutoffs) %>% rename(p = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
df_m <- expand.grid(malig, cutoffs) %>% rename(p = Var1, cutoffs = Var2) %>%
mutate(type = "malig", y=1)
df2 <- df_b %>% full_join(df_m, by=cutoffs)
df_b <- expand.grid(benign, cutoffs) %>% rename(p = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
df_m <- expand.grid(malig, cutoffs) %>% rename(p = Var1, cutoffs = Var2) %>%
mutate(type = "malig", y=1)
df2 <- df_b %>% full_join(df_m, by="cutoffs")
View(df2)
df2 <- df_b %>% full_join(df_m)
View(df2)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(p>cutoffs, 1, 0))
View(df2)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(p>cutoffs, 1, 0)) %>%
select(type, everything())
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(p>cutoffs, 1, 0)) %>%
dplyr::select(type, everything())
View(df2)
df_b <- expand.grid(benign, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
df_m <- expand.grid(malig, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "malig", y=1)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(p>cutoffs, 1, 0)) %>%
dplyr::select(type, everything())
df_b <- expand.grid(benign, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
df_m <- expand.grid(malig, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "malig", y=1)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%
dplyr::select(type, everything())
View(df2)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%   mutate(TPR = mean(prob[y==1]>cutoffs)) %>%
dplyr::select(type, everything())
View(df2)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%   group_by(cutoffs) %>%
mutate(TPR = mean(prob[y==1]>cutoffs)) %>%
dplyr::select(type, everything())
View(df2)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%   group_by(cutoffs) %>%
mutate(TPR = mean(prob[y==1]>cutoffs), TNR = mean(prob[y==0]<cutoffs),
FPR = 1-TNR) %>%
dplyr::select(type, everything())
View(df2)
df2 %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
df2 %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=1)+
scale_x_continuous(limits = c(0,1))
df2 %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=0.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=1)+
scale_x_continuous(limits = c(0,1))
df2 %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=2)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=1)+
scale_x_continuous(limits = c(0,1))
df2 %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=2)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=1, size = 1)+
scale_x_continuous(limits = c(0,1))
df2_plot <- df2 %>% select(cutoffs, TPR, FPR)
df2_plot <- df2 %>% dplyr::select(cutoffs, TPR, FPR)
df2_plot %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=2)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=1)+
scale_x_continuous(limits = c(0,1))
df2_plot %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=2)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
df2_plot %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
View(df2_plot)
df2_plot <- df2 %>% dplyr::select(cutoffs, TPR, FPR) %>% distinct()
View(df2_plot)
df2_plot %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%   group_by(cutoffs) %>%
mutate(TPR = mean(prob[y==1]>cutoffs), TNR = mean(prob[y==0]<cutoffs),
FPR = 1-TNR) %>% distinct() %>%
dplyr::select(type, everything())
View(df2)
cutoffs<-c(.2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7)
df1$y = ifelse(df1$name =="malig",1,0)
df1 <- df1 %>% rename("prob" = "value")
cutoffs<-c(.2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7)
df1 <- data.frame(cbind(benign, malig)) %>% pivot_longer(c(benign, malig))
df1$y = ifelse(df1$name =="malig",1,0)
df1 <- df1 %>% rename("prob" = "value")
#View(df1)
#######
df_b <- expand.grid(benign, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
df_m <- expand.grid(malig, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "malig", y=1)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%   group_by(cutoffs) %>%
mutate(TPR = mean(prob[y==1]>cutoffs), TNR = mean(prob[y==0]<cutoffs),
FPR = 1-TNR) %>% dplyr::select(type, everything())
df2_plot <- df2 %>% dplyr::select(cutoffs, TPR, FPR) %>% distinct()
df2_plot %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
#######
sens<-function(cutoffs,data=data, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=data, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(cutoffs,sens,df1)
specificity<-sapply(cutoffs,spec,df1)
ROC1<-data.frame(sensitivity,specificity,cutoffs)
#View(ROC1)
ROC1%>%gather(key,rate,-cutoffs)%>%ggplot(aes(cutoffs,rate,color=key))+geom_path()+
geom_vline(xintercept=c(.1,.5,.9),lty=2,color="gray50")
ROC1$TPR<-rev(sensitivity)
ROC1$FPR<-rev(1-specificity)
ROC1%>%ggplot(aes(FPR,TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
cutoffs<-c(.2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7)
df1 <- data.frame(cbind(benign, malig)) %>% pivot_longer(c(benign, malig))
df1$y = ifelse(df1$name =="malig",1,0)
df1 <- df1 %>% rename("prob" = "value")
#View(df1)
#######
df_b <- expand.grid(benign, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "benign", y=0)
df_m <- expand.grid(malig, cutoffs) %>% rename(prob = Var1, cutoffs = Var2) %>%
mutate(type = "malig", y=1)
df2 <- df_b %>% full_join(df_m) %>% mutate(prediction = ifelse(prob>cutoffs, 1, 0)) %>%   group_by(cutoffs) %>%
mutate(TPR = mean(prob[y==1]>cutoffs), TNR = mean(prob[y==0]<cutoffs),
FPR = 1-TNR) %>% dplyr::select(type, everything())
df2_plot <- df2 %>% dplyr::select(cutoffs, TPR, FPR) %>% distinct()
df2_plot %>% ggplot(aes(x=FPR,y=TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
#######
sens<-function(cutoffs,data=data, y=y) mean(data[data$y==1,]$prob>cutoffs)
spec<-function(cutoffs,data=data, y=y) mean(data[data$y==0,]$prob<cutoffs)
sensitivity<-sapply(cutoffs,sens,df1)
specificity<-sapply(cutoffs,spec,df1)
ROC1<-data.frame(sensitivity,specificity,cutoffs)
#View(ROC1)
ROC1%>%gather(key,rate,-cutoffs)%>%ggplot(aes(cutoffs,rate,color=key))+
geom_path(size=2)+
geom_vline(xintercept=c(.1,.5,.9),lty=2,color="gray50")
ROC1$TPR<-rev(sensitivity)
ROC1$FPR<-rev(1-specificity)
ROC1%>%ggplot(aes(FPR,TPR))+geom_path(size=1.5)+
geom_segment(aes(x=0,y=0,xend=1,yend=1),lty=2)+
scale_x_continuous(limits = c(0,1))
View(ROC1)
# your code here
class_diag(df1$prob, df$y)
# your code here
class_diag(df1$prob, df1$y)
# your code here
class_diag(df2$prob, df2$y)
d <- vector()
for(i in 1:nrow(df)){
for(k in 1:nrow(df)){
while (k<i) {
k = k+1
}
d<-c(d,ifelse(df$malig[i]> df$benign[k], 1, 0))
}
}
sum(d)
count(d)
malig<-c(.49, .36, .57, .53, .61, .66)
benign<-c(.41, .22, .26, .56, .31 ,.39)
df <- expand.grid(malig, benign) %>% rename(malig = Var1, benign = Var2)
#View(df)
df %>% summarize(sum((malig-benign)>0), mean((malig-benign)>0))
d <- vector()
for(i in 1:nrow(df)){
for(k in 1:nrow(df)){
while (k<i) {
k = k+1
}
d<-c(d,ifelse(df$malig[i]> df$benign[k], 1, 0))
}
}
sum(d)
df0 <- data.frame(c(benign, malig))
data.frame(c(benign, malig)) %>% View()
data.frame(benign, malig) %>% View()
df0 <- data.frame(benign, malig)
d <- vector()
for(i in 1:nrow(df0)){
for(k in 1:nrow(df0)){
while (k<i) {
k = k+1
}
d<-c(d,ifelse(df0$malig[i]> df0$benign[k], 1, 0))
}
}
sum(d)
d <- vector()
for(i in 1:nrow(df0)){
for(k in 1:nrow(df0)){
d<-c(d,ifelse(df0$malig[i]> df0$benign[k], 1, 0))
}
}
sum(d)
count(d)
n(d)
length(d)
(length(d)-sum(d))/length(d)
sum(d)/length(d)
Sys.which()
blogdown::serve_site()
blogdown::serve_site()
setwd("~/CLASSES/_SDS 348 Bioinformatics/Project3")
blogdown::serve_site()
blogdown::serve_site()
View(cv)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Users/olgao/Anaconda3/python.exe")
library(tidyverse)
#tips<-read.csv("tips.csv")
tips<- py$tips
library(tidyverse)
#tips<-read.csv("tips.csv")
tips<- py$tips
#View(tips)
tips %>% ggplot(aes(total_bill, tip, color = sex))+
geom_point(size = 3)+
facet_wrap(~time)
blogdown::serve_site()
